{"version":3,"sources":["images/broccoli_logo.svg","components/header/Header.js","contexts/dialogContext.js","components/body/formdialog/FormDialog.js","components/body/successDialog/SuccessDialog.js","components/body/Body.js","components/footer/Footer.js","App.js","theme.js","index.js"],"names":["Header","className","AppBar","color","Toolbar","Typography","variant","src","Logo","DialogContext","createContext","DialogContextProvider","props","toggleFormDialog","setState","prevState","isFormDialogVisible","toggleSuccessDialog","isSuccessDialogVisible","state","initialState","Provider","value","this","children","Component","validateEmailAddress","emailAddress","confirmEmailAddress","errorMessage","test","FormDialog","Consumer","context","Dialog","open","onBackdropClick","DialogContent","DialogTitle","DialogContentText","initialValues","fullName","email","confirmEmail","validate","values","errors","validateFullName","Object","some","onSubmit","setSubmitting","setErrors","console","log","axios","post","name","then","response","catch","error","data","submitForm","isSubmitting","component","TextField","size","margin","type","label","inputProps","fullWidth","LinearProgress","Button","disabled","onClick","SuccessDialog","Body","Grid","container","direction","item","xs","Box","justify","spacing","Footer","bgcolor","App","theme","createMuiTheme","palette","primary","main","secondary","overrides","MuiButton","root","background","typography","fontFamily","join","h3","textShadow","fontSize","h6","body1","fontWeight","body2","ReactDOM","render","ThemeProvider","StrictMode","document","getElementById"],"mappings":"qUAAe,MAA0B,0CCwB1BA,G,OAjBA,WACb,OACE,qBAAKC,UAAU,SAAf,SACE,cAACC,EAAA,EAAD,CAAQD,UAAU,SAASE,MAAM,YAAjC,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAM,UAAUF,UAAU,eAAnD,4BAGA,qBAAKA,UAAU,YAAf,SACE,qBAAKM,IAAKC,e,iJCdTC,EAAgBC,0BAyCdC,E,kDAtCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,iBAAmB,WACjB,EAAKC,UAAS,SAACC,EAAWH,GACxB,MAAO,CAAEI,qBAAsBD,EAAUC,yBAb1B,EAiBnBC,oBAAsB,WACpB,EAAKH,UAAS,SAACC,EAAWH,GACxB,MAAO,CAAEM,wBAAyBH,EAAUG,4BAhB9C,EAAKC,MAAQP,EAAMQ,aACfR,EAAMQ,aACN,CACEJ,qBAAqB,EACrBE,wBAAwB,GAPb,E,qDAwBjB,OACE,cAACT,EAAcY,SAAf,CACEC,MAAK,2BACAC,KAAKJ,OADL,IAEHN,iBAAkBU,KAAKV,iBACvBI,oBAAqBM,KAAKN,sBAJ9B,SAOGM,KAAKX,MAAMY,e,GAjCgBC,aCkBvBC,EAAuB,SAClCC,GAEI,IADJC,EACG,uDADmB,KAElBC,EAAe,GASnB,OARID,GAAuBD,IAAiBC,EAC1CC,EAAe,gCACLF,EAEA,4CAA4CG,KAAKH,KAC3DE,EACE,oEAHFA,EAAe,iCAKVA,GAgIME,EA7HI,WACjB,OACE,cAACtB,EAAcuB,SAAf,UACG,SAACC,GAAa,IAEXjB,EAGEiB,EAHFjB,oBACAH,EAEEoB,EAFFpB,iBACAI,EACEgB,EADFhB,oBAEF,OACE,cAACiB,EAAA,EAAD,CACEjC,UAAU,aACVkC,KAAMnB,EACNoB,gBAAiBvB,EAHnB,SAKE,eAACwB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAarC,UAAU,eAAvB,mCAGA,cAACsC,EAAA,EAAD,CAAmBtC,UAAU,cAA7B,2FAIA,cAAC,IAAD,CACEuC,cAAe,CACbC,SAAU,GACVC,MAAO,GACPC,aAAc,IAEhBC,SAAU,SAACC,GACT,IAAMC,EAAS,GAYf,GAXAA,EAAOL,SA1DO,SAACA,GAC/B,IAAIZ,EAAe,GAOnB,OANKY,EAEO,mBAAmBX,KAAKW,KAClCZ,EACE,iGAHFA,EAAe,uBAKVA,EAkD2BkB,CAAiBF,EAAOJ,UAC1CK,EAAOJ,MAAQhB,EAAqBmB,EAAOH,OAC3CI,EAAOH,aAAejB,EACpBmB,EAAOF,aACPE,EAAOH,OAGWM,OAAOH,OAAOC,GAAQG,MACxC,SAAC3B,GAAD,MAAqB,KAAVA,KAIX,OAAOwB,GAGXI,SAAU,SAACL,EAAD,GAAkD,IAAvCM,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,UAAuB,EAAZxC,MAC7CyC,QAAQC,IAAI,eACZC,IACGC,KACC,6EACA,CAAEC,KAAMZ,EAAOJ,SAAUC,MAAOG,EAAOH,QAExCgB,MAAK,SAACC,GAELN,QAAQC,IAAIK,GACZ9C,IACAI,IACAkC,GAAc,MAEfS,OAAM,SAACC,GACNT,EAAU,CACRT,aAAckB,EAAMF,SAASG,KAAKjC,eAEpCsB,GAAc,OAzCtB,SA6CG,gBAAGY,EAAH,EAAGA,WAAYC,EAAf,EAAeA,aAAf,OACC,eAAC,IAAD,CAAM/D,UAAU,cAAhB,UACE,cAAC,IAAD,CACEgE,UAAWC,IACX5D,QAAQ,WACR6D,KAAK,QACLC,OAAO,SACPX,KAAK,WACLY,KAAK,OACLC,MAAM,YACNC,WAAY,CAAE,cAAe,aAC7BC,WAAS,IAEX,cAAC,IAAD,CACEP,UAAWC,IACX5D,QAAQ,WACR6D,KAAK,QACLC,OAAO,SACPX,KAAK,QACLY,KAAK,QACLC,MAAM,QACNC,WAAY,CAAE,cAAe,cAC7BC,WAAS,IAEX,cAAC,IAAD,CACEP,UAAWC,IACX5D,QAAQ,WACR6D,KAAK,QACLC,OAAO,SACPX,KAAK,eACLY,KAAK,QACLC,MAAM,gBACNC,WAAY,CAAE,cAAe,qBAC7BC,WAAS,IAEVR,GAAgB,cAACS,EAAA,EAAD,IACjB,qBAAKxE,UAAU,gBAAf,SACE,cAACyE,EAAA,EAAD,CACEpE,QAAQ,YACRqE,SAAUX,EACVY,QAASb,EACTS,WAAS,EAJX,qCCtGPK,EAjCO,WACpB,OACE,cAACpE,EAAcuB,SAAf,UACG,SAACC,GAAa,IACLf,EAAgDe,EAAhDf,uBAAwBD,EAAwBgB,EAAxBhB,oBAChC,OACE,cAACiB,EAAA,EAAD,CACEC,KAAMjB,EACNkB,gBAAiBnB,EAFnB,SAIE,eAACoB,EAAA,EAAD,CAAepC,UAAU,aAAzB,UACE,cAACqC,EAAA,EAAD,CAAarC,UAAU,eAAvB,uBACA,cAACsC,EAAA,EAAD,CAAmBtC,UAAU,cAA7B,uFAIA,qBAAKA,UAAU,gBAAf,SACE,cAACyE,EAAA,EAAD,CACEpE,QAAQ,YACRsE,QAAS3D,EACTuD,WAAS,EAHX,2BCyBDM,G,OAzCF,WACX,OACE,cAACrE,EAAcuB,SAAf,UACG,SAACC,GAAa,IACLpB,EAAqBoB,EAArBpB,iBACR,OACE,qBAAKZ,UAAU,eAAf,SACE,eAAC8E,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAAShF,UAAU,kBAA7C,UACE,cAAC8E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAKnF,UAAU,iBAAf,SACE,eAAC8E,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAQ,SAASC,QAAS,EAA1C,UACE,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,cAAC9E,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAM,YAA/B,gDAIF,cAAC4E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,cAAC9E,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAM,YAA/B,oDAIF,cAAC4E,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,cAACT,EAAA,EAAD,CAAQpE,QAAQ,YAAYsE,QAAS/D,EAArC,wCAOR,eAACkE,EAAA,EAAD,CAAMG,MAAI,EAAV,UACE,cAAC,EAAD,IACA,cAAC,EAAD,iBC1BDK,G,OAVA,WAEX,OACI,eAACH,EAAA,EAAD,CAAKnF,UAAU,SAASuF,QAAQ,iBAAhC,UACI,cAACnF,EAAA,EAAD,CAAYC,QAAQ,QAApB,mDACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,iECSGmF,MAZf,WACE,OACE,sBAAKxF,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UACE,cAAC,EAAD,MAEF,cAAC,EAAD,Q,iBCsCSyF,EAhDDC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,YAGVE,UAAW,CACTC,UAAW,CACTC,KAAM,CACJC,WAAY,uDAIlBC,WAAY,CACVC,WAAY,CAAC,UAAW,SAAU,cAAcC,KAAK,KACrDC,GAAI,CACFC,WAAY,0BACZC,SAAU,SACV,2BAA4B,CAC1BA,SAAU,SAGdC,GAAI,CACFD,SAAU,SACV,2BAA4B,CAC1BA,SAAU,WAGdE,MAAO,CACLC,WAAY,MACZH,SAAU,SACV,2BAA4B,CAC1BA,SAAU,SAGdI,MAAO,CACLD,WAAY,MACZH,SAAU,SACV,2BAA4B,CAC1BA,SAAU,YCtClBK,IAASC,OACP,cAACC,EAAA,EAAD,CAAetB,MAAOA,EAAtB,SACE,cAAC,IAAMuB,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.923644d4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/broccoli_logo.1818539d.svg\";","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { Icon, Typography } from \"@material-ui/core\";\r\nimport Logo from \"../../images/broccoli_logo.svg\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <AppBar className=\"header\" color=\"secondary\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"primary\" className=\"company-name\">\r\n            Broccoli &amp; Co.\r\n          </Typography>\r\n          <div className=\"icon-logo\">\r\n            <img src={Logo}></img>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { createContext, Component } from \"react\";\r\n\r\nexport const DialogContext = createContext();\r\n\r\nclass DialogContextProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = props.initialState\r\n      ? props.initialState\r\n      : {\r\n          isFormDialogVisible: false,\r\n          isSuccessDialogVisible: false,\r\n        };\r\n  }\r\n\r\n  toggleFormDialog = () => {\r\n    this.setState((prevState, props) => {\r\n      return { isFormDialogVisible: !prevState.isFormDialogVisible };\r\n    });\r\n  };\r\n\r\n  toggleSuccessDialog = () => {\r\n    this.setState((prevState, props) => {\r\n      return { isSuccessDialogVisible: !prevState.isSuccessDialogVisible };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <DialogContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          toggleFormDialog: this.toggleFormDialog,\r\n          toggleSuccessDialog: this.toggleSuccessDialog,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </DialogContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DialogContextProvider;\r\n","import { React } from \"react\";\r\nimport { Button, LinearProgress } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport { DialogContext } from \"../../../contexts/dialogContext\";\r\n\r\nexport const validateFullName = (fullName) => {\r\n  var errorMessage = \"\";\r\n  if (!fullName) {\r\n    errorMessage = \"Please enter a name.\";\r\n  } else if (!/^[a-zA-Z\\s]{3,}$/.test(fullName)) {\r\n    errorMessage =\r\n      \"Please enter at least 3 characters for your name, using only alphabetical letters and spaces.\";\r\n  }\r\n  return errorMessage;\r\n};\r\n\r\nexport const validateEmailAddress = (\r\n  emailAddress,\r\n  confirmEmailAddress = null\r\n) => {\r\n  var errorMessage = \"\";\r\n  if (confirmEmailAddress && emailAddress !== confirmEmailAddress) {\r\n    errorMessage = \"Email addresses do not match.\";\r\n  } else if (!emailAddress) {\r\n    errorMessage = \"Please enter an email address.\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(emailAddress)) {\r\n    errorMessage =\r\n      \"Please enter an email address in the format 'email@address.com'.\";\r\n  }\r\n  return errorMessage;\r\n};\r\n\r\nconst FormDialog = () => {\r\n  return (\r\n    <DialogContext.Consumer>\r\n      {(context) => {\r\n        const {\r\n          isFormDialogVisible,\r\n          toggleFormDialog,\r\n          toggleSuccessDialog,\r\n        } = context;\r\n        return (\r\n          <Dialog\r\n            className=\"dialog-box\"\r\n            open={isFormDialogVisible}\r\n            onBackdropClick={toggleFormDialog}\r\n          >\r\n            <DialogContent>\r\n              <DialogTitle className=\"dialog-title\">\r\n                Request an invitation\r\n              </DialogTitle>\r\n              <DialogContentText className=\"dialog-text\">\r\n                Please fill in your details below, and click Submit to receive\r\n                an invitation.\r\n              </DialogContentText>\r\n              <Formik\r\n                initialValues={{\r\n                  fullName: \"\",\r\n                  email: \"\",\r\n                  confirmEmail: \"\",\r\n                }}\r\n                validate={(values) => {\r\n                  const errors = {};\r\n                  errors.fullName = validateFullName(values.fullName);\r\n                  errors.email = validateEmailAddress(values.email);\r\n                  errors.confirmEmail = validateEmailAddress(\r\n                    values.confirmEmail,\r\n                    values.email\r\n                  );\r\n\r\n                  const errorExists = Object.values(errors).some(\r\n                    (value) => value !== \"\"\r\n                  );\r\n\r\n                  if (errorExists) {\r\n                    return errors;\r\n                  }\r\n                }}\r\n                onSubmit={(values, { setSubmitting, setErrors, props }) => {\r\n                  console.log(\"POST values\");\r\n                  axios\r\n                    .post(\r\n                      \"https://l94wc2001h.execute-api.ap-southeast-2.amazonaws.com/prod/fake-auth\",\r\n                      { name: values.fullName, email: values.email }\r\n                    )\r\n                    .then((response) => {\r\n                      // change to a thank you modal\r\n                      console.log(response);\r\n                      toggleFormDialog();\r\n                      toggleSuccessDialog();\r\n                      setSubmitting(false);\r\n                    })\r\n                    .catch((error) => {\r\n                      setErrors({\r\n                        confirmEmail: error.response.data.errorMessage,\r\n                      });\r\n                      setSubmitting(false);\r\n                    });\r\n                }}\r\n              >\r\n                {({ submitForm, isSubmitting }) => (\r\n                  <Form className=\"invite-form\">\r\n                    <Field\r\n                      component={TextField}\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      margin=\"normal\"\r\n                      name=\"fullName\"\r\n                      type=\"name\"\r\n                      label=\"Full Name\"\r\n                      inputProps={{ \"data-testid\": \"nameField\" }}\r\n                      fullWidth\r\n                    />\r\n                    <Field\r\n                      component={TextField}\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      margin=\"normal\"\r\n                      name=\"email\"\r\n                      type=\"email\"\r\n                      label=\"Email\"\r\n                      inputProps={{ \"data-testid\": \"emailField\" }}\r\n                      fullWidth\r\n                    />\r\n                    <Field\r\n                      component={TextField}\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      margin=\"normal\"\r\n                      name=\"confirmEmail\"\r\n                      type=\"email\"\r\n                      label=\"Confirm Email\"\r\n                      inputProps={{ \"data-testid\": \"confirmEmailField\" }}\r\n                      fullWidth\r\n                    />\r\n                    {isSubmitting && <LinearProgress />}\r\n                    <div className=\"dialog-button\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disabled={isSubmitting}\r\n                        onClick={submitForm}\r\n                        fullWidth\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </div>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n            </DialogContent>\r\n          </Dialog>\r\n        );\r\n      }}\r\n    </DialogContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default FormDialog;\r\n","import { React } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { DialogContext } from \"../../../contexts/dialogContext\";\r\n\r\nconst SuccessDialog = () => {\r\n  return (\r\n    <DialogContext.Consumer>\r\n      {(context) => {\r\n        const { isSuccessDialogVisible, toggleSuccessDialog } = context;\r\n        return (\r\n          <Dialog\r\n            open={isSuccessDialogVisible}\r\n            onBackdropClick={toggleSuccessDialog}\r\n          >\r\n            <DialogContent className=\"dialog-box\">\r\n              <DialogTitle className=\"dialog-title\">All done!</DialogTitle>\r\n              <DialogContentText className=\"dialog-text\">\r\n                You will be one of the first to experience Broccoli &amp; Co.\r\n                when we launch.\r\n              </DialogContentText>\r\n              <div className=\"dialog-button\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={toggleSuccessDialog}\r\n                  fullWidth\r\n                >\r\n                  OK\r\n                </Button>\r\n              </div>\r\n            </DialogContent>\r\n          </Dialog>\r\n        );\r\n      }}\r\n    </DialogContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default SuccessDialog;\r\n","import { React, useState } from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FormDialog from \"./formdialog/FormDialog\";\r\nimport SuccessDialog from \"./successDialog/SuccessDialog\";\r\nimport { DialogContext } from \"../../contexts/dialogContext\";\r\nimport \"./Body.scss\";\r\n\r\nconst Body = () => {\r\n  return (\r\n    <DialogContext.Consumer>\r\n      {(context) => {\r\n        const { toggleFormDialog } = context;\r\n        return (\r\n          <div className=\"body-section\">\r\n            <Grid container direction=\"column\" className=\"title-container\">\r\n              <Grid item xs={10}>\r\n                <Box className=\"title-text-box\">\r\n                  <Grid container justify=\"center\" spacing={2}>\r\n                    <Grid item xs={12}>\r\n                      <Typography variant=\"h3\" color=\"secondary\">\r\n                        A better way to enjoy every day.\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Typography variant=\"h6\" color=\"secondary\">\r\n                        Be the first to know when we launch.\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Button variant=\"contained\" onClick={toggleFormDialog}>\r\n                        Request an Invite\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item>\r\n                <FormDialog />\r\n                <SuccessDialog />\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        );\r\n      }}\r\n    </DialogContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport \"./Footer.scss\";\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <Box className=\"footer\" bgcolor=\"secondary.main\">\r\n            <Typography variant=\"body2\">Made with 💚 in Melbourne. </Typography>\r\n            <Typography variant=\"body2\">&#169; 2020 Broccoli &amp; Co. All rights reserved. </Typography>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Footer; ","import \"./App.scss\";\r\nimport Header from \"./components/header/Header\";\r\nimport Body from \"./components/body/Body\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport DialogContextProvider from \"./contexts/dialogContext\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <DialogContextProvider>\r\n        <Body />\r\n      </DialogContextProvider>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#33A721\",\r\n    },\r\n    secondary: {\r\n      main: \"#FFFFFF\",\r\n    },\r\n  },\r\n  overrides: {\r\n    MuiButton: {\r\n      root: {\r\n        background: \"linear-gradient(45deg, #caf761 30%, #9ddb38 90%);\",\r\n      },\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: [\"Poppins\", \"Roboto\", \"sans-serif\"].join(\",\"),\r\n    h3: {\r\n      textShadow: \"2px 2px rgba(0,0,0,0.3)\",\r\n      fontSize: \"1.3rem\",\r\n      \"@media (min-width:600px)\": {\r\n        fontSize: \"3rem\",\r\n      },\r\n    },\r\n    h6: {\r\n      fontSize: \"0.8rem\",\r\n      \"@media (min-width:600px)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n    },\r\n    body1: {\r\n      fontWeight: \"300\",\r\n      fontSize: \"0.7rem\",\r\n      \"@media (min-width:600px)\": {\r\n        fontSize: \"1rem\",\r\n      },\r\n    },\r\n    body2: {\r\n      fontWeight: \"200\",\r\n      fontSize: \"0.6rem\",\r\n      \"@media (min-width:600px)\": {\r\n        fontSize: \"1rem\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport theme from \"./theme\"\r\n\r\nReactDOM.render(\r\n  <ThemeProvider theme={theme}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </ThemeProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}